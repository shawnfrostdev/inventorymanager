generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  password                String
  name                    String
  role                    String    @default("USER")
  googleId                String?   @unique
  picture                 String?
  isEmailVerified         Boolean   @default(false)
  verificationToken       String?
  verificationTokenExpires DateTime?
  resetPasswordToken      String?
  resetPasswordExpires    DateTime?
  resetToken              String?
  resetTokenExpires       DateTime?
  lastLogin               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  products                Product[]
  stockMovements          StockMovement[]
  orders                  Order[]

  @@map("users")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  sku         String    @unique
  barcode     String?   @unique
  price       Float
  cost        Float
  quantity    Int       @default(0)
  minQuantity Int       @default(0)
  imageUrl    String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stockMovements StockMovement[]
  orderItems  OrderItem[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model StockMovement {
  id          String    @id @default(uuid())
  type        MovementType
  quantity    Int
  reason      String?
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())

  @@map("stock_movements")
}

model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  taxId       String?
  creditLimit Float?    @default(0)
  balance     Float     @default(0)
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]

  @@map("customers")
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  shippingAmount  Float         @default(0)
  total           Float
  notes           String?
  shippingAddress String?
  billingAddress  String?
  customer        Customer      @relation(fields: [customerId], references: [id])
  customerId      String
  createdBy       User          @relation(fields: [userId], references: [id])
  userId          String
  orderDate       DateTime      @default(now())
  dueDate         DateTime?
  shippedDate     DateTime?
  deliveredDate   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderItems      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(uuid())
  quantity    Int
  unitPrice   Float
  discount    Float   @default(0)
  total       Float
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  FAILED
} 